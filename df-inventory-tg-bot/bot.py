import os
import logging
import time
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from sheets import (
    get_google_sheets_service, get_drive_service, get_or_create_spreadsheet,
    create_new_sheet, save_inventory_data, get_inventory_history,
    move_existing_files_to_folder
)
from config import WAREHOUSES, PRODUCT_CATEGORIES
from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
TELEGRAM_TOKEN = '7877667795:AAGL7oIUMWpztvw2N3TV2WBkjCmx7yqxI3c'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CACHE_TIMEOUT = 300  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –¥–æ 5 –º–∏–Ω—É—Ç
REQUEST_TIMEOUT = 30  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫—ç—à–∞
user_data = {}
sheets_cache = {}
drive_cache = {}

def get_cached_drive_files():
    try:
        current_time = time.time()
        if 'drive_files' in sheets_cache and current_time - sheets_cache['drive_files']['timestamp'] < CACHE_TIMEOUT:
            return sheets_cache['drive_files']['data']
        
        time.sleep(0.5)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        files = drive_service.files().list(
            q="mimeType='application/vnd.google-apps.spreadsheet'",
            fields='files(id, name)'
        ).execute()
        
        sheets_cache['drive_files'] = {
            'timestamp': current_time,
            'data': files.get('files', [])
        }
        return sheets_cache['drive_files']['data']
    except Exception as e:
        logging.error(f"Error getting drive files: {str(e)}")
        return sheets_cache.get('drive_files', {}).get('data', []) if 'drive_files' in sheets_cache else []

def get_cached_sheets(spreadsheet_id):
    try:
        cache_key = f'sheets_{spreadsheet_id}'
        current_time = time.time()
        if cache_key in sheets_cache and current_time - sheets_cache[cache_key]['timestamp'] < CACHE_TIMEOUT:
            return sheets_cache[cache_key]['data']
        
        time.sleep(0.5)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        result = sheets_service.spreadsheets().get(
            spreadsheetId=spreadsheet_id,
            fields='sheets.properties.title'
        ).execute()
        
        sheets_cache[cache_key] = {
            'timestamp': current_time,
            'data': result.get('sheets', [])
        }
        return sheets_cache[cache_key]['data']
    except Exception as e:
        logging.error(f"Error getting sheets for {spreadsheet_id}: {str(e)}")
        return sheets_cache.get(f'sheets_{spreadsheet_id}', {}).get('data', []) if f'sheets_{spreadsheet_id}' in sheets_cache else []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user_id = update.effective_user.id
    user_data[user_id] = {
        'step': 'phone',
        'inventory_data': {}
    }
    
    keyboard = [[InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é", callback_data="new_inventory")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if query.data == "new_inventory":
        await start_new_inventory(update, context)
    elif query.data.startswith("warehouse_"):
        await handle_warehouse_selection(update, context)
    elif query.data.startswith("confirm_warehouse_"):
        await handle_warehouse_confirmation(update, context)
    elif query.data == "back_to_categories":
        user_data[user_id]['step'] = 'selecting_category'
        user_data[user_id]['category_path'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        reply_markup = get_product_category_keyboard(user_id)
        message = await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:",
            reply_markup=reply_markup
        )
        user_data[user_id]['last_category_message_id'] = message.message_id
        
        await query.message.delete()
        await query.answer()
    elif query.data == "back_to_warehouse":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–∞
        user_data[user_id]['step'] = 'warehouse'
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:",
            reply_markup=get_warehouse_keyboard()
        )
    elif query.data == "back_category":
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if 'previous_category_path' in user_data[user_id]:
            user_data[user_id]['category_path'] = user_data[user_id]['previous_category_path']
            del user_data[user_id]['previous_category_path']  # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å
            reply_markup = get_product_category_keyboard(user_id)
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:",
                reply_markup=reply_markup
            )
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
        elif 'category_path' in user_data[user_id] and user_data[user_id]['category_path']:
            user_data[user_id]['category_path'].pop()
            reply_markup = get_product_category_keyboard(user_id)
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:",
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–∫–ª–∞–¥–∞
            user_data[user_id]['step'] = 'warehouse'
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:",
                reply_markup=get_warehouse_keyboard()
            )
    elif query.data.startswith("category_"):
        category_index = int(query.data[9:])
        categories = list(PRODUCT_CATEGORIES.keys())
        category = categories[category_index]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º –ø—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_data[user_id]['category_path'] = [category]
        user_data[user_id]['current_category'] = category
        user_data[user_id]['step'] = 'selecting_product'
        
        reply_markup = get_product_category_keyboard(user_id)
        await query.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}:",
            reply_markup=reply_markup
        )
    elif query.data.startswith("subcat_"):
        _, index, subcat_name = query.data.split('_')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ø—É—Ç—å
        if 'category_path' not in user_data[user_id]:
            user_data[user_id]['category_path'] = []
        user_data[user_id]['category_path'].append(subcat_name)
        
        reply_markup = get_product_category_keyboard(user_id)
        await query.message.edit_text(
            f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è {subcat_name}:",
            reply_markup=reply_markup
        )
    elif query.data == "confirm_save":
        await finish_inventory(update, context)
    elif query.data == "cancel_save":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏
        try:
            if 'summary_message_id' in user_data[user_id]:
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=user_data[user_id]['summary_message_id']
                )
        except Exception as e:
            logging.error(f"Error deleting summary message: {str(e)}")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            del user_data[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        await query.message.reply_text(
            "‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é", callback_data="new_inventory")
            ]])
        )
    elif query.data == "finish":
        await show_inventory_summary(update, context)
    elif query.data.startswith("product_"):
        product_index = int(query.data[8:])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏
        current_category = PRODUCT_CATEGORIES
        for path_item in user_data[user_id]['category_path']:
            if isinstance(current_category, dict) and 'subcategories' in current_category:
                current_category = current_category['subcategories'][path_item]
            else:
                current_category = current_category[path_item]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        items = current_category.get('items', []) if isinstance(current_category, dict) else current_category
        product = items[product_index]
        
        user_data[user_id]['current_product'] = product
        user_data[user_id]['step'] = 'entering_quantity'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        message = await query.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {product}:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_category")
            ]])
        )
        user_data[user_id]['quantity_request_message_id'] = message.message_id
    elif query.data == "back_to_products":
        user_data[user_id]['step'] = 'selecting_product'
        await show_products(update, context)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    if user_id not in user_data:
        user_data[user_id] = {
            'step': 'phone',
            'inventory_data': {}
        }
    
    current_step = user_data[user_id]['step']
    
    if current_step == 'name':
        user_data[user_id]['name'] = message_text
        user_data[user_id]['date'] = datetime.now().strftime("%Y-%m-%d")
        user_data[user_id]['step'] = 'warehouse'
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:", 
            reply_markup=get_warehouse_keyboard()
        )
    elif current_step == 'entering_quantity':
        try:
            quantity = float(message_text)
            if quantity < 0:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
                return
                
            product = user_data[user_id]['current_product']
            user_data[user_id]['inventory_data'][product] = quantity
            user_data[user_id]['step'] = 'selecting_category'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            user_data[user_id]['quantity_message_id'] = update.message.message_id
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            try:
                if 'last_category_message_id' in user_data[user_id]:
                    await context.bot.delete_message(
                        chat_id=update.message.chat_id,
                        message_id=user_data[user_id]['last_category_message_id']
                    )
            except Exception as e:
                logging.error(f"Error deleting previous category message: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            try:
                if 'quantity_request_message_id' in user_data[user_id]:
                    await context.bot.delete_message(
                        chat_id=update.message.chat_id,
                        message_id=user_data[user_id]['quantity_request_message_id']
                    )
            except Exception as e:
                logging.error(f"Error deleting quantity request message: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            try:
                await update.message.delete()
            except Exception as e:
                logging.error(f"Error deleting quantity message: {str(e)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            reply_markup = get_product_category_keyboard(user_id)
            message = await update.message.reply_text(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {product} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {quantity}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:",
                reply_markup=reply_markup
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            user_data[user_id]['last_category_message_id'] = message.message_id
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    user_id = update.effective_user.id
    contact = update.message.contact
    
    if user_id not in user_data or user_data[user_id]['step'] != 'phone':
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user_data[user_id]['phone'] = contact.phone_number
    user_data[user_id]['step'] = 'name'
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )

async def show_history_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–π"""
    try:
        if not context.user_data.get('selected_warehouse'):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥.",
                reply_markup=ReplyKeyboardMarkup([['–í—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥']], resize_keyboard=True)
            )
            return

        warehouse_name = context.user_data['selected_warehouse']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫—ç—à–∞
        files = get_cached_drive_files()
        
        # –ò—â–µ–º –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª
        spreadsheet = next((file for file in files if file['name'] == warehouse_name), None)
        if not spreadsheet:
            await update.message.reply_text(
                f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_name}",
                reply_markup=ReplyKeyboardMarkup([['–í—ã–±—Ä–∞—Ç—å —Å–∫–ª–∞–¥']], resize_keyboard=True)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –∏–∑ –∫—ç—à–∞
        sheets = get_cached_sheets(spreadsheet['id'])
        
        if not sheets:
            keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é", callback_data="new_inventory")]]
            await update.message.reply_text(
                "–ò—Å—Ç–æ—Ä–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
        keyboard = []
        for i, sheet in enumerate(sheets):
            sheet_title = sheet['properties']['title']
            if sheet_title.startswith('–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è_'):
                date_str = sheet_title.split('_')[1]
                button = InlineKeyboardButton(
                    f"üìã {date_str}",
                    callback_data=f"h{i}"
                )
                keyboard.append([button])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é"
        keyboard.append([InlineKeyboardButton("–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é", callback_data="new_inventory")])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º mapping –¥–ª—è callback
        context.bot_data['sheet_mapping'] = {
            f"h{i}": sheet['properties']['title']
            for i, sheet in enumerate(sheets)
        }
        context.bot_data['current_spreadsheet_id'] = spreadsheet['id']

        await update.message.reply_text(
            f"üìä –ò—Å—Ç–æ—Ä–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–π –¥–ª—è —Å–∫–ª–∞–¥–∞ {warehouse_name}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logging.error(f"Error in show_history_menu: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def show_inventory_details(update: Update, context: ContextTypes.DEFAULT_TYPE, spreadsheet_id, sheet_title):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    sheets_service = get_google_sheets_service()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—Å—Ç–∞
    result = sheets_service.spreadsheets().values().get(
        spreadsheetId=spreadsheet_id,
        range=f"{sheet_title}!A1:C50"
    ).execute()
    
    values = result.get('values', [])
    if not values:
        await update.message.reply_text(
            "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_history")]])
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    try:
        date_str = sheet_title.split('_')[1]
        date_obj = datetime.strptime(date_str, '%Y-%m-%d')
        formatted_date = date_obj.strftime('%d.%m.%Y')
        message_parts.append(f"üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç {formatted_date}\n")
    except (IndexError, ValueError):
        message_parts.append("üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º –ª–∏—Ü–µ
    warehouse_info = values[0][0] if len(values) > 0 and len(values[0]) > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω"
    responsible_person = values[1][0] if len(values) > 1 and len(values[1]) > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω"
    phone = values[2][0] if len(values) > 2 and len(values[2]) > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    message_parts.append(f"üè≠ –°–∫–ª–∞–¥: {warehouse_info}")
    message_parts.append(f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ: {responsible_person}")
    message_parts.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    message_parts.append("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:")
    message_parts.append("‚Ññ  |  –ü—Ä–æ–¥—É–∫—Ç  |  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    message_parts.append("-" * 40)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    for i, row in enumerate(values[5:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
        if len(row) >= 2:
            product = row[1] if len(row) > 1 else ""
            quantity = row[2] if len(row) > 2 else ""
            message_parts.append(f"{i}. {product}: {quantity}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = "\n".join(message_parts)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_history")]]
    
    await update.message.reply_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_edit_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    sheet_title = query.data.split('_')[1]
    
    service = get_google_sheets_service()
    result = service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID,
        range=f"{sheet_title}!A1:E"
    ).execute()
    
    values = result.get('values', [])
    if not values:
        await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    user_data[user_id]['editing_sheet'] = sheet_title
    user_data[user_id]['inventory_data'] = {}
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for row in values[5:]:
        if len(row) >= 2:
            user_data[user_id]['inventory_data'][row[0]] = row[1]
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_product_category_keyboard(user_id)
    )

async def handle_warehouse_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    warehouse_index = int(query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    original_warehouse = WAREHOUSES[warehouse_index]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_warehouse_{warehouse_index}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="back_to_warehouse")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∫–ª–∞–¥: {original_warehouse}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä:",
        reply_markup=reply_markup
    )

async def handle_warehouse_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    warehouse_index = int(query.data.split('_')[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    original_warehouse = WAREHOUSES[warehouse_index]
    
    user_data[user_id]['warehouse'] = original_warehouse
    user_data[user_id]['warehouse_index'] = warehouse_index  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    user_data[user_id]['step'] = 'product_category'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    message = await query.edit_message_text(
        f"–°–∫–ª–∞–¥ {original_warehouse} –≤—ã–±—Ä–∞–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:",
        reply_markup=get_product_category_keyboard(user_id)
    )
    user_data[user_id]['last_category_message_id'] = message.message_id

def get_warehouse_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞–º–∏"""
    keyboard = []
    for i, warehouse in enumerate(WAREHOUSES):
        keyboard.append([InlineKeyboardButton(
            f"üè≠ {warehouse}",
            callback_data=f"warehouse_{i}"
        )])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="new_inventory")])
    return InlineKeyboardMarkup(keyboard)

def get_product_category_keyboard(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    keyboard = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ user_data
    current_category_path = user_data.get(user_id, {}).get('category_path', [])
    
    if not current_category_path:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = list(PRODUCT_CATEGORIES.keys())
        category_emojis = {
            "–§—Ä—É–∫—Ç—ã": "üçé",
            "–û–≤–æ—â–∏": "ü•ï",
            "–ú—è—Å–æ –∏ –º—è—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": "ü•©",
            "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": "ü•õ",
            "–ö—Ä—É–ø—ã –∏ –±–æ–±–æ–≤—ã–µ": "ü´õ",
            "–ú—É–∫–∞ –∏ –≤—ã–ø–µ—á–∫–∞": "üçû",
            "–ö–æ–Ω—Å–µ—Ä–≤—ã": "ü•´",
            "–ù–∞–ø–∏—Ç–∫–∏": "ü•§",
            "–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã": "üßÇ",
            "–°–ª–∞–¥–æ—Å—Ç–∏ –∏ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã": "üç¨",
            "–û—Ä–µ—Ö–∏ —Å–µ–º–µ–Ω–∞": "ü•ú",
            "–ë–∞–∫–∞–ª–µ—è": "üßà",
            "–ú–∞–≥–∞–∑–∏–Ω/–ë—É—Ñ–µ—Ç": "üè™"
        }
        
        for i, category in enumerate(categories):
            emoji = category_emojis.get(category, "üì¶")
            keyboard.append([InlineKeyboardButton(
                f"{emoji} {category}",
                callback_data=f"category_{i}"
            )])
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        current_category = PRODUCT_CATEGORIES
        for path_item in current_category_path:
            if isinstance(current_category, dict) and 'subcategories' in current_category:
                current_category = current_category['subcategories'][path_item]
            else:
                current_category = current_category[path_item]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if isinstance(current_category, dict) and 'subcategories' in current_category:
            for i, (subcat_name, _) in enumerate(current_category['subcategories'].items()):
                keyboard.append([InlineKeyboardButton(
                    f"üìÅ {subcat_name}",
                    callback_data=f"subcat_{i}_{subcat_name}"
                )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
        items = current_category.get('items', []) if isinstance(current_category, dict) else current_category
        for i, item in enumerate(items):
            keyboard.append([InlineKeyboardButton(
                f"üì¶ {item}",
                callback_data=f"product_{i}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é", callback_data="finish")])
    if current_category_path:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_category")])
    else:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_warehouse")])
    
    return InlineKeyboardMarkup(keyboard)

async def handle_product_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    category_index = int(query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    categories = list(PRODUCT_CATEGORIES.keys())
    category = categories[category_index]
    
    user_data[user_id]['current_category'] = category
    user_data[user_id]['step'] = 'product'
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=get_product_keyboard(category))

def get_product_keyboard(category):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    keyboard = []
    products = PRODUCT_CATEGORIES[category]
    for i, product in enumerate(products):
        keyboard.append([InlineKeyboardButton(
            f"üì¶ {product}",
            callback_data=f"product_{category}_{i}"
        )])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="category")])
    return InlineKeyboardMarkup(keyboard)

async def handle_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    _, category, product_index = query.data.split('_')
    product_index = int(product_index)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    product = PRODUCT_CATEGORIES[category][product_index]
    
    user_data[user_id]['current_product'] = product
    user_data[user_id]['step'] = 'quantity'
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product}:")

async def show_inventory_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∏—Ç–æ–≥–æ–≤
    if 'category_path' not in user_data[user_id]:
        user_data[user_id]['category_path'] = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—É—Ç—å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    user_data[user_id]['previous_category_path'] = user_data[user_id]['category_path'].copy()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏
    message_parts = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    message_parts.append("üìä –ò—Ç–æ–≥–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏")
    message_parts.append("=" * 40)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–µ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º –ª–∏—Ü–µ
    message_parts.append(f"üè≠ –°–∫–ª–∞–¥: {user_data[user_id]['warehouse']}")
    message_parts.append(f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ: {user_data[user_id]['name']}")
    message_parts.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id]['phone']}")
    message_parts.append(f"üìÖ –î–∞—Ç–∞: {user_data[user_id]['date']}")
    message_parts.append("=" * 40)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    message_parts.append("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:")
    message_parts.append("‚Ññ  |  –ü—Ä–æ–¥—É–∫—Ç  |  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    message_parts.append("-" * 40)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    counter = 1
    for product, quantity in user_data[user_id]['inventory_data'].items():
        message_parts.append(f"{counter}. {product} | {quantity}")
        counter += 1
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = "\n".join(message_parts)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_category")
        ]
    ]
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        if 'category_message_id' in user_data[user_id]:
            await context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=user_data[user_id]['category_message_id']
            )
    except Exception as e:
        logging.error(f"Error deleting category message: {str(e)}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    summary_message = await query.message.reply_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    user_data[user_id]['summary_message_id'] = summary_message.message_id
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await query.message.delete()
    except Exception as e:
        logging.error(f"Error deleting current message: {str(e)}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await query.answer()

async def finish_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    user_id = query.from_user.id
    
    sheets_service = get_google_sheets_service()
    drive_service = get_drive_service()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–∫–ª–∞–¥–∞
    spreadsheet_id = get_or_create_spreadsheet(
        sheets_service,
        drive_service,
        user_data[user_id]['warehouse']
    )
    
    if 'editing_sheet' in user_data[user_id]:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é
        sheet_title = user_data[user_id]['editing_sheet']
        success = save_inventory_data(
            sheets_service,
            spreadsheet_id,
            user_data[user_id]['warehouse'],
            user_data[user_id]['date'],
            user_data[user_id]['name'],
            user_data[user_id]['phone'],
            user_data[user_id]['inventory_data']
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é
        success = create_new_sheet(
            sheets_service,
            spreadsheet_id,
            user_data[user_id]['warehouse'],
            user_data[user_id]['date']
        )
        if success:
            success = save_inventory_data(
                sheets_service,
                spreadsheet_id,
                user_data[user_id]['warehouse'],
                user_data[user_id]['date'],
                user_data[user_id]['name'],
                user_data[user_id]['phone'],
                user_data[user_id]['inventory_data']
            )
    
    if success:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏
        message_parts = []
        message_parts.append("üìä –ò—Ç–æ–≥–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏")
        message_parts.append("=" * 40)
        message_parts.append(f"üè≠ –°–∫–ª–∞–¥: {user_data[user_id]['warehouse']}")
        message_parts.append(f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ: {user_data[user_id]['name']}")
        message_parts.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id]['phone']}")
        message_parts.append(f"üìÖ –î–∞—Ç–∞: {user_data[user_id]['date']}")
        message_parts.append("=" * 40)
        message_parts.append("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:")
        message_parts.append("‚Ññ  |  –ü—Ä–æ–¥—É–∫—Ç  |  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        message_parts.append("-" * 40)
        
        counter = 1
        for product, quantity in user_data[user_id]['inventory_data'].items():
            message_parts.append(f"{counter}. {product} | {quantity}")
            counter += 1
        
        message = "\n".join(message_parts)
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if 'summary_message_id' in user_data[user_id]:
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=user_data[user_id]['summary_message_id']
                )
        except Exception as e:
            logging.error(f"Error deleting summary message: {str(e)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        await query.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é", callback_data="new_inventory")]])
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await query.answer("‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é", callback_data="new_inventory")]])
        )

async def start_new_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    user_data[user_id] = {
        'step': 'phone',
        'inventory_data': {}
    }
    
    keyboard = [[KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await query.message.reply_text(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=reply_markup
    )
    await query.answer()

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    category = user_data[user_id]['current_category']
    
    keyboard = []
    for i, product in enumerate(PRODUCT_CATEGORIES[category]):
        keyboard.append([InlineKeyboardButton(
            f"üì¶ {product}",
            callback_data=f"product_{i}"
        )])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
    
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        drive_service = get_drive_service()
        move_existing_files_to_folder(drive_service)
    except Exception as e:
        logging.error(f"Error moving existing files: {str(e)}")
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 